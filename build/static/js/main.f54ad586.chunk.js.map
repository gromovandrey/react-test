{"version":3,"sources":["components/HeaderBtn/HeaderBtn.js","components/CountryList/CountryList.js","components/Country/Country.js","components/App/App.js","index.js"],"names":["HeaderBtn","data","value","periodValue","options","handleSelectRegionChange","handleSelectPeriodChange","selectItem","map","items","console","log","key","id","name","optionsValue","option","className","onChange","hidden","CountryList","city","payment","allYearPeriod","okato","Country","region","areas","index","payments","Object","keys","reduce","sum","parseFloat","App","state","event","setState","target","arr","filter","this","visibleCountry","filterSelectRegionOption","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f54ad586.chunk.js","sourcesContent":["import React from 'react';\r\nimport './HeaderBtn.css';\r\n\r\nexport const HeaderBtn = ({ data, value, periodValue, options, handleSelectRegionChange, handleSelectPeriodChange }) => {\r\n  // передаем в option значения округов\r\n  const selectItem = data.map( (items) => {\r\n    console.log(items)\r\n    return <option key={items.id} value={items.id}>{items.name}</option>\r\n  });\r\n  // передаем в option значения месяцев\r\n  const optionsValue = options.map( (option) => { \r\n    return <option key={option.id} value={option.name}>{option.name}</option>;\r\n  });\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-xl col-lg\">\r\n          <div className=\"region d-flex justify-content-between\">\r\n\r\n            <select className=\"custom-select region__select\" onChange={handleSelectRegionChange}>\r\n              <option value={value} hidden>Все регионы</option>\r\n              {selectItem}\r\n            </select>\r\n\r\n            <select className=\"custom-select region__select\" onChange={handleSelectPeriodChange}>\r\n              <option value={periodValue} hidden>Период</option>\r\n              {optionsValue}\r\n            </select>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport './CountryList.css';\r\n\r\nexport const CountryList = ({ city, payment, periodValue, allYearPeriod }) => {\r\n  return(\r\n    <li className=\"city\"> \r\n      <strong>Область(Респ):</strong> {city.name} <br/> \r\n      <strong>Окато:</strong> {city.okato} <br/> \r\n      { periodValue === 'period' ? \r\n          <strong>Начис/к опл за год: <span>{allYearPeriod}&#8381;</span> </strong> :\r\n          <strong>Начис/к опл за {periodValue}: <span>{payment[periodValue]}&#8381;</span> </strong>\r\n      }\r\n    </li>\r\n  );\r\n}","import React from 'react';\r\nimport { CountryList } from '../CountryList/CountryList'\r\nimport './Country.css';\r\n\r\nexport const Country = ({ data, periodValue }) => {\r\n  const city = data.map( (region) => {\r\n    // перебираем все города\r\n    const cities = region.areas.map((city, index) => {\r\n      // перебираем все месяцы \r\n      const payment = city.payments.map(payment => {\r\n        // складываем все результаты месяцев для каждого города в allYearPeriod\r\n        const allYearPeriod = Object.keys( payment ).reduce( ( sum, key ) => {\r\n          return sum + parseFloat( payment[key] );\r\n        }, 0 );\r\n        \r\n        return <CountryList key={index}  city={city} payment={payment} periodValue={periodValue} allYearPeriod={allYearPeriod} /> \r\n      });\r\n      return payment;\r\n    });\r\n     return cities;\r\n  });\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-xl col-lg\">\r\n          <div className=\"card city__card\">\r\n            <ul className=\"list-group list-group-flush city__card-list\">\r\n              {city}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n );\r\n}","import React, { Component, Fragment } from 'react';\nimport { HeaderBtn } from '../HeaderBtn/HeaderBtn';\nimport { Country } from '../Country/Country';\n\nimport region from '../../region.json'; \nimport './App.css';\n\nclass App extends Component {\n  state = {\n    data: region.data,\n    value: 'all',\n    periodValue: 'period',\n    options: [\n      { \"id\": 1, \"name\":  \"Январь\", \"value\": \"jan\" }, { \"id\": 2, \"name\":  \"Февраль\", \"value\": \"feb\"}, { \"id\": 3, \"name\":  \"Март\", \"value\": \"march\" },\n      { \"id\": 4, \"name\":  \"Апрель\", \"value\": \"april\" }, { \"id\": 5, \"name\":  \"Май\", \"value\": \"may\" },  { \"id\": 6, \"name\":  \"Июнь\", \"value\": \"june\" },\n      { \"id\": 7, \"name\":  \"Июль\", \"value\": \"july\"}, { \"id\": 8, \"name\":  \"Август\", \"value\": \"aug\" }, { \"id\": 9, \"name\":  \"Сентябрь\", \"value\": \"sept\" },\n      { \"id\": 10, \"name\":  \"Октябрь\", \"value\": \"oct\"}, { \"id\": 11, \"name\":  \"Ноябрь\", \"value\": \"nov\" }, { \"id\": 12, \"name\":  \"Декабрь\", \"value\": \"dec\" }]\n  }\n\n  // фильтрация по выбранному округу в select \n  filterSelectRegionOption(arr, value) {\n    switch(value) {\n      case 'all': return arr;\n      case 'cfo': return arr.filter(region => region.id === 'cfo'); \n      case 'ufo': return arr.filter(region => region.id === 'ufo'); \n      case 'nwfo': return arr.filter(region => region.id === 'nwfo'); \n      case 'efo': return arr.filter(region => region.id === 'efo'); \n      case 'sibirskiyfo': return arr.filter(region => region.id === 'sibirskiyfo'); \n      case 'uralfo': return arr.filter(region => region.id === 'uralfo'); \n      case 'privolzhskiyfo': return arr.filter(region => region.id === 'privolzhskiyfo'); \n      case 'nkfo': return arr.filter(region => region.id === 'nkfo'); \n      default: return arr;\n    }\n  }\n  \n  handleSelectRegionChange = (event) => {\n    this.setState({ value: event.target.value })}\n\n  handleSelectPeriodChange = (event) => {\n    this.setState({ periodValue: event.target.value })}\n\n  render() {\n    const { data, value, periodValue, options } = this.state;\n    const visibleCountry = this.filterSelectRegionOption(data, value);\n    \n    return (\n      <Fragment>\n        <HeaderBtn \n          data={data}\n          options={options}\n          value={value} \n          periodValue={periodValue}\n          handleSelectRegionChange={this.handleSelectRegionChange}\n          handleSelectPeriodChange={this.handleSelectPeriodChange}\n        />\n\n        <Country \n          data={visibleCountry}\n          periodValue={periodValue}\n        /> \n      </Fragment>\n   );\n  }\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}